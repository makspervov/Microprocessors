
Zadanie2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000001e4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a38  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000688  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046f  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000380  00000000  00000000  00001cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000207b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8a:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_send>:
void getkey()
{
	char x;
	while(1)
	{
		for (uint8_t i = 4; i < 8; i++)
  92:	98 b3       	in	r25, 0x18	; 24
  94:	98 60       	ori	r25, 0x08	; 8
  96:	98 bb       	out	0x18, r25	; 24
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	9f 70       	andi	r25, 0x0F	; 15
  a0:	92 2b       	or	r25, r18
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	97 7f       	andi	r25, 0xF7	; 247
  a8:	98 bb       	out	0x18, r25	; 24
  aa:	00 00       	nop
  ac:	98 b3       	in	r25, 0x18	; 24
  ae:	98 60       	ori	r25, 0x08	; 8
  b0:	98 bb       	out	0x18, r25	; 24
  b2:	20 e1       	ldi	r18, 0x10	; 16
  b4:	82 9f       	mul	r24, r18
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	98 b3       	in	r25, 0x18	; 24
  bc:	9f 70       	andi	r25, 0x0F	; 15
  be:	89 2b       	or	r24, r25
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_send+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_send+0x40>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <clearLCD>:
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	88 bb       	out	0x18, r24	; 24
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 49 00 	call	0x92	; 0x92 <LCD_send>
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	87 e9       	ldi	r24, 0x97	; 151
  ea:	9a e3       	ldi	r25, 0x3A	; 58
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <clearLCD+0x16>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <clearLCD+0x1c>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <LCDinit>:
  f6:	8c ef       	ldi	r24, 0xFC	; 252
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	18 ba       	out	0x18, r1	; 24
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	88 bb       	out	0x18, r24	; 24
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	0e 94 49 00 	call	0x92	; 0x92 <LCD_send>
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	84 60       	ori	r24, 0x04	; 4
 112:	88 bb       	out	0x18, r24	; 24
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	0e 94 49 00 	call	0x92	; 0x92 <LCD_send>
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	88 bb       	out	0x18, r24	; 24
 120:	88 b3       	in	r24, 0x18	; 24
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	88 bb       	out	0x18, r24	; 24
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	0e 94 49 00 	call	0x92	; 0x92 <LCD_send>
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	88 bb       	out	0x18, r24	; 24
 132:	0e 94 6b 00 	call	0xd6	; 0xd6 <clearLCD>
 136:	08 95       	ret

00000138 <setCursor>:
 138:	98 b3       	in	r25, 0x18	; 24
 13a:	9b 7f       	andi	r25, 0xFB	; 251
 13c:	98 bb       	out	0x18, r25	; 24
 13e:	90 e4       	ldi	r25, 0x40	; 64
 140:	89 9f       	mul	r24, r25
 142:	60 0d       	add	r22, r0
 144:	11 24       	eor	r1, r1
 146:	86 2f       	mov	r24, r22
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_send>
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	84 60       	ori	r24, 0x04	; 4
 152:	88 bb       	out	0x18, r24	; 24
 154:	81 ee       	ldi	r24, 0xE1	; 225
 156:	94 e0       	ldi	r25, 0x04	; 4
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <setCursor+0x20>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <setCursor+0x26>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <write>:
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	8c 01       	movw	r16, r24
 16c:	d6 2f       	mov	r29, r22
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 9c 00 	call	0x138	; 0x138 <setCursor>
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	0f c0       	rjmp	.+30     	; 0x198 <write+0x36>
 17a:	c0 31       	cpi	r28, 0x10	; 16
 17c:	21 f4       	brne	.+8      	; 0x186 <write+0x24>
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 9c 00 	call	0x138	; 0x138 <setCursor>
 186:	f8 01       	movw	r30, r16
 188:	ec 0f       	add	r30, r28
 18a:	f1 1d       	adc	r31, r1
 18c:	c7 fd       	sbrc	r28, 7
 18e:	fa 95       	dec	r31
 190:	80 81       	ld	r24, Z
 192:	0e 94 49 00 	call	0x92	; 0x92 <LCD_send>
 196:	cf 5f       	subi	r28, 0xFF	; 255
 198:	cd 17       	cp	r28, r29
 19a:	7c f3       	brlt	.-34     	; 0x17a <write+0x18>
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <main>:
		}
	}
}

int main(void)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	67 97       	sbiw	r28, 0x17	; 23
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xF0;
 1ba:	80 ef       	ldi	r24, 0xF0	; 240
 1bc:	8a bb       	out	0x1a, r24	; 26
	
	LCDinit();
 1be:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCDinit>
	char tekst[] = "M. Pervov Przycisk nr:";
 1c2:	87 e1       	ldi	r24, 0x17	; 23
 1c4:	e0 e6       	ldi	r30, 0x60	; 96
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	de 01       	movw	r26, r28
 1ca:	11 96       	adiw	r26, 0x01	; 1
 1cc:	01 90       	ld	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	8a 95       	dec	r24
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x26>
	write(tekst, 22);//wypisanie tekstu
 1d4:	66 e1       	ldi	r22, 0x16	; 22
 1d6:	ce 01       	movw	r24, r28
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	0e 94 b1 00 	call	0x162	; 0x162 <write>
 1de:	ff cf       	rjmp	.-2      	; 0x1de <main+0x38>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
