
Zadanie 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c7  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054a  00000000  00000000  00000767  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000239  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  00000eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fb  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000041  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <timer10ms>:
# include <avr/io.h>
# include <util/delay.h>

void timer10ms()
{
	while(!(TIFR & (1 << OCF0))){};
  6c:	08 b6       	in	r0, 0x38	; 56
  6e:	01 fe       	sbrs	r0, 1
  70:	fd cf       	rjmp	.-6      	; 0x6c <timer10ms>
	TIFR |= _BV(OCF0);
  72:	88 b7       	in	r24, 0x38	; 56
  74:	82 60       	ori	r24, 0x02	; 2
  76:	88 bf       	out	0x38, r24	; 56
  78:	08 95       	ret

0000007a <czas_1s>:
}

void czas_1s()
{
  7a:	cf 93       	push	r28
	for(uint8_t i = 0; i <100; i++)
  7c:	c0 e0       	ldi	r28, 0x00	; 0
  7e:	03 c0       	rjmp	.+6      	; 0x86 <czas_1s+0xc>
	{
		timer10ms();
  80:	0e 94 36 00 	call	0x6c	; 0x6c <timer10ms>
	TIFR |= _BV(OCF0);
}

void czas_1s()
{
	for(uint8_t i = 0; i <100; i++)
  84:	cf 5f       	subi	r28, 0xFF	; 255
  86:	c4 36       	cpi	r28, 0x64	; 100
  88:	d8 f3       	brcs	.-10     	; 0x80 <czas_1s+0x6>
	{
		timer10ms();
	}
}
  8a:	cf 91       	pop	r28
  8c:	08 95       	ret

0000008e <main>:

int main(void)
{
	OCR0 = 40;
  8e:	88 e2       	ldi	r24, 0x28	; 40
  90:	8c bf       	out	0x3c, r24	; 60
	DDRA = 0x01;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  96:	1b ba       	out	0x1b, r1	; 27
	TCCR0 |= _BV(CS02) | _BV(WGM01);
  98:	83 b7       	in	r24, 0x33	; 51
  9a:	8c 60       	ori	r24, 0x0C	; 12
  9c:	83 bf       	out	0x33, r24	; 51
	
    while (1) 
    {
		PORTA ^= _BV(PA0);
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	8b bb       	out	0x1b, r24	; 27
		czas_1s();
  a6:	0e 94 3d 00 	call	0x7a	; 0x7a <czas_1s>
  aa:	f9 cf       	rjmp	.-14     	; 0x9e <main+0x10>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
