
Zadanie2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074d  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000615  00000000  00000000  00000a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003df  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036c  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  74:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <przycisk>:
		case 9 : return 0x6F;
		default: return 0xAA;
	}
	return 0xAA;
}
void wyswietl(uint8_t num) {//fukcja do wyswietlanie na 7LED
  7c:	99 b3       	in	r25, 0x19	; 25
  7e:	98 17       	cp	r25, r24
  80:	11 f0       	breq	.+4      	; 0x86 <przycisk+0xa>
  82:	e1 e0       	ldi	r30, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <przycisk+0xc>
  86:	e0 e0       	ldi	r30, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	06 2e       	mov	r0, r22
  8c:	02 c0       	rjmp	.+4      	; 0x92 <przycisk+0x16>
  8e:	95 95       	asr	r25
  90:	87 95       	ror	r24
  92:	0a 94       	dec	r0
  94:	e2 f7       	brpl	.-8      	; 0x8e <przycisk+0x12>
  96:	80 ff       	sbrs	r24, 0
  98:	15 c0       	rjmp	.+42     	; 0xc4 <przycisk+0x48>
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	e0 5a       	subi	r30, 0xA0	; 160
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	80 81       	ld	r24, Z
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <przycisk+0x2e>
  a6:	95 95       	asr	r25
  a8:	87 95       	ror	r24
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <przycisk+0x2a>
  ae:	80 fd       	sbrc	r24, 0
  b0:	08 c0       	rjmp	.+16     	; 0xc2 <przycisk+0x46>
  b2:	83 ec       	ldi	r24, 0xC3	; 195
  b4:	99 e0       	ldi	r25, 0x09	; 9
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <przycisk+0x3a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <przycisk+0x40>
  bc:	00 00       	nop
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	08 95       	ret
  c2:	08 95       	ret
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret

000000c8 <main>:
		led[1]=(num%100)/10;// ustalanie na 1,2,3 kolumnie
		led[0]=num%10;//ustalanie na 1,2,3,4 kolumnie
	}
}

int main(void) {
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	//deklaracja portow A,B,C,D
	DDRA = 0x00;
  d2:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xff;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
  d8:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
  da:	11 ba       	out	0x11, r1	; 17
	PORTA = 0xff;
  dc:	8b bb       	out	0x1b, r24	; 27
	PORTD = 0xff;
  de:	82 bb       	out	0x12, r24	; 18
	PORTB = 0;
  e0:	18 ba       	out	0x18, r1	; 24
	PORTC = 0;
  e2:	15 ba       	out	0x15, r1	; 21
	uint8_t i,j,k;
	j=0;k=0;state[0]=0;state[1]=0;
  e4:	e0 e6       	ldi	r30, 0x60	; 96
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
  ea:	11 82       	std	Z+1, r1	; 0x01
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
	while (j<2) {
  f0:	2c c0       	rjmp	.+88     	; 0x14a <main+0x82>
		wyswietl(count[j]); //pokaz wprowadzana liczbe
  f2:	ed 2e       	mov	r14, r29
  f4:	f1 2c       	mov	r15, r1
		for (i=0;i<8;i++) // odczytanie liczby
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	15 c0       	rjmp	.+42     	; 0x124 <main+0x5c>
		if ( (przycisk( &PINA, i)) && k<4 ) {
  fa:	6c 2f       	mov	r22, r28
  fc:	89 e3       	ldi	r24, 0x39	; 57
  fe:	0e 94 3e 00 	call	0x7c	; 0x7c <przycisk>
 102:	88 23       	and	r24, r24
 104:	71 f0       	breq	.+28     	; 0x122 <main+0x5a>
 106:	14 30       	cpi	r17, 0x04	; 4
 108:	60 f4       	brcc	.+24     	; 0x122 <main+0x5a>
			count[j]= (count[j] * 10) + i;
 10a:	f7 01       	movw	r30, r14
 10c:	ee 59       	subi	r30, 0x9E	; 158
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	88 0f       	add	r24, r24
 114:	98 2f       	mov	r25, r24
 116:	99 0f       	add	r25, r25
 118:	99 0f       	add	r25, r25
 11a:	89 0f       	add	r24, r25
 11c:	8c 0f       	add	r24, r28
 11e:	80 83       	st	Z, r24
			k++;
 120:	1f 5f       	subi	r17, 0xFF	; 255
	PORTC = 0;
	uint8_t i,j,k;
	j=0;k=0;state[0]=0;state[1]=0;
	while (j<2) {
		wyswietl(count[j]); //pokaz wprowadzana liczbe
		for (i=0;i<8;i++) // odczytanie liczby
 122:	cf 5f       	subi	r28, 0xFF	; 255
 124:	c8 30       	cpi	r28, 0x08	; 8
 126:	48 f3       	brcs	.-46     	; 0xfa <main+0x32>
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	0d c0       	rjmp	.+26     	; 0x146 <main+0x7e>
		if ( (przycisk( &PINA, i)) && k<4 ) {
			count[j]= (count[j] * 10) + i;
			k++;
		}
		for (i=0;i<8;i++) //odczytujemy operacje dla liczb
		if (przycisk( &PIND, i)) {
 12c:	6c 2f       	mov	r22, r28
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	0e 94 3e 00 	call	0x7c	; 0x7c <przycisk>
 134:	88 23       	and	r24, r24
 136:	31 f0       	breq	.+12     	; 0x144 <main+0x7c>
			if (!j) count[2]=i;
 138:	d1 11       	cpse	r29, r1
 13a:	02 c0       	rjmp	.+4      	; 0x140 <main+0x78>
 13c:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <count+0x2>
			j++;k=0;
 140:	df 5f       	subi	r29, 0xFF	; 255
 142:	10 e0       	ldi	r17, 0x00	; 0
		for (i=0;i<8;i++) // odczytanie liczby
		if ( (przycisk( &PINA, i)) && k<4 ) {
			count[j]= (count[j] * 10) + i;
			k++;
		}
		for (i=0;i<8;i++) //odczytujemy operacje dla liczb
 144:	cf 5f       	subi	r28, 0xFF	; 255
 146:	c8 30       	cpi	r28, 0x08	; 8
 148:	88 f3       	brcs	.-30     	; 0x12c <main+0x64>
	PORTD = 0xff;
	PORTB = 0;
	PORTC = 0;
	uint8_t i,j,k;
	j=0;k=0;state[0]=0;state[1]=0;
	while (j<2) {
 14a:	d2 30       	cpi	r29, 0x02	; 2
 14c:	90 f2       	brcs	.-92     	; 0xf2 <main+0x2a>
		if (przycisk( &PIND, i)) {
			if (!j) count[2]=i;
			j++;k=0;
		}
	}
	j=count[2];
 14e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count+0x2>
	switch(j) {
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	c9 f0       	breq	.+50     	; 0x188 <main+0xc0>
 156:	28 f4       	brcc	.+10     	; 0x162 <main+0x9a>
 158:	88 23       	and	r24, r24
 15a:	41 f0       	breq	.+16     	; 0x16c <main+0xa4>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	69 f0       	breq	.+26     	; 0x17a <main+0xb2>
 160:	30 c0       	rjmp	.+96     	; 0x1c2 <main+0xfa>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	d1 f0       	breq	.+52     	; 0x19a <main+0xd2>
 166:	84 30       	cpi	r24, 0x04	; 4
 168:	29 f1       	breq	.+74     	; 0x1b4 <main+0xec>
 16a:	2b c0       	rjmp	.+86     	; 0x1c2 <main+0xfa>
		case 0: // dodawanie
		count[2]=count[0]+count[1];
 16c:	e2 e6       	ldi	r30, 0x62	; 98
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	90 81       	ld	r25, Z
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	89 0f       	add	r24, r25
 176:	82 83       	std	Z+2, r24	; 0x02
		break;
 178:	24 c0       	rjmp	.+72     	; 0x1c2 <main+0xfa>
		case 1: // odejmowanie
		count[2]=count[0]-count[1];
 17a:	e2 e6       	ldi	r30, 0x62	; 98
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	89 1b       	sub	r24, r25
 184:	82 83       	std	Z+2, r24	; 0x02
		break;
 186:	1d c0       	rjmp	.+58     	; 0x1c2 <main+0xfa>
		case 2: // mnozenie
		count[2]=count[0]*count[1];
 188:	e2 e6       	ldi	r30, 0x62	; 98
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	89 9f       	mul	r24, r25
 192:	80 2d       	mov	r24, r0
 194:	11 24       	eor	r1, r1
 196:	82 83       	std	Z+2, r24	; 0x02
		break;
 198:	14 c0       	rjmp	.+40     	; 0x1c2 <main+0xfa>
		case 3: // dzielenie
		count[2]=(count[0]*10)/count[1];
 19a:	e2 e6       	ldi	r30, 0x62	; 98
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	2a e0       	ldi	r18, 0x0A	; 10
 1a2:	82 9f       	mul	r24, r18
 1a4:	c0 01       	movw	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	61 81       	ldd	r22, Z+1	; 0x01
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__divmodhi4>
 1b0:	62 83       	std	Z+2, r22	; 0x02
		break;
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <main+0xfa>
		case 4: //czy jest rowne
		if(count[1]=count[0]){
 1b4:	e2 e6       	ldi	r30, 0x62	; 98
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	81 83       	std	Z+1, r24	; 0x01
 1bc:	81 11       	cpse	r24, r1
			count[2]=count[1];
 1be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count+0x2>
	while(1) 
	{
		wyswietl(count[2]);//wyswietlamy wynik
		return 0;
	}
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	08 95       	ret

000001d2 <__divmodhi4>:
 1d2:	97 fb       	bst	r25, 7
 1d4:	07 2e       	mov	r0, r23
 1d6:	16 f4       	brtc	.+4      	; 0x1dc <__divmodhi4+0xa>
 1d8:	00 94       	com	r0
 1da:	07 d0       	rcall	.+14     	; 0x1ea <__divmodhi4_neg1>
 1dc:	77 fd       	sbrc	r23, 7
 1de:	09 d0       	rcall	.+18     	; 0x1f2 <__divmodhi4_neg2>
 1e0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodhi4>
 1e4:	07 fc       	sbrc	r0, 7
 1e6:	05 d0       	rcall	.+10     	; 0x1f2 <__divmodhi4_neg2>
 1e8:	3e f4       	brtc	.+14     	; 0x1f8 <__divmodhi4_exit>

000001ea <__divmodhi4_neg1>:
 1ea:	90 95       	com	r25
 1ec:	81 95       	neg	r24
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	08 95       	ret

000001f2 <__divmodhi4_neg2>:
 1f2:	70 95       	com	r23
 1f4:	61 95       	neg	r22
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255

000001f8 <__divmodhi4_exit>:
 1f8:	08 95       	ret

000001fa <__udivmodhi4>:
 1fa:	aa 1b       	sub	r26, r26
 1fc:	bb 1b       	sub	r27, r27
 1fe:	51 e1       	ldi	r21, 0x11	; 17
 200:	07 c0       	rjmp	.+14     	; 0x210 <__udivmodhi4_ep>

00000202 <__udivmodhi4_loop>:
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	a6 17       	cp	r26, r22
 208:	b7 07       	cpc	r27, r23
 20a:	10 f0       	brcs	.+4      	; 0x210 <__udivmodhi4_ep>
 20c:	a6 1b       	sub	r26, r22
 20e:	b7 0b       	sbc	r27, r23

00000210 <__udivmodhi4_ep>:
 210:	88 1f       	adc	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	5a 95       	dec	r21
 216:	a9 f7       	brne	.-22     	; 0x202 <__udivmodhi4_loop>
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	bc 01       	movw	r22, r24
 21e:	cd 01       	movw	r24, r26
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
