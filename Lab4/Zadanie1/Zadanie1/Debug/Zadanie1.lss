
Zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031f  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <getkey>:

void getkey()
{
	uint8_t x, sk;		//inicjalizacja zmiennych x i sk
	uint8_t dt = 0;		//zmienna sluzy do obslugi nacisniec wiecej niz jeden przycisk
	for (uint8_t i = 4; i < 8; i++)
  6c:	34 e0       	ldi	r19, 0x04	; 4
#include <util/delay.h>

void getkey()
{
	uint8_t x, sk;		//inicjalizacja zmiennych x i sk
	uint8_t dt = 0;		//zmienna sluzy do obslugi nacisniec wiecej niz jeden przycisk
  6e:	60 e0       	ldi	r22, 0x00	; 0
	for (uint8_t i = 4; i < 8; i++)
  70:	4e c0       	rjmp	.+156    	; 0x10e <getkey+0xa2>
	{
		PORTA= ~_BV(i); // wprowadz 0 na i-tej pozycji i 1 na innych pozycjach
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	03 2e       	mov	r0, r19
  78:	02 c0       	rjmp	.+4      	; 0x7e <getkey+0x12>
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	0a 94       	dec	r0
  80:	e2 f7       	brpl	.-8      	; 0x7a <getkey+0xe>
  82:	80 95       	com	r24
  84:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	89 ef       	ldi	r24, 0xF9	; 249
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <getkey+0x1e>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <getkey+0x24>
  90:	00 00       	nop
		_delay_ms(1);	//opoznienie co 1 ms
		sk = PINA;		//odczyt stanu klawiatury
  92:	89 b3       	in	r24, 0x19	; 25
		if(sk == 0xFF)	//sprawdzanie stanu klawiatury
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	11 f4       	brne	.+4      	; 0x9c <getkey+0x30>
		{
			PORTB = 0xFF;	//jesli nacisnieto 2 i wiecej przyciskow niech wszystkie diody zaswieca
  98:	88 bb       	out	0x18, r24	; 24
			break;
  9a:	08 95       	ret
  9c:	89 ef       	ldi	r24, 0xF9	; 249
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <getkey+0x34>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <getkey+0x3a>
  a6:	00 00       	nop
		}
		_delay_ms(1);	//opoznienie co 1 ms
		x=PINA&0x0F;	// odczyt i zapamietowanie stanu klawiatury
  a8:	29 b3       	in	r18, 0x19	; 25
  aa:	2f 70       	andi	r18, 0x0F	; 15
		if (x == (PINA&0x0F))//petla if eliminujaca mozliwosc wystapienia drgania stykow
  ac:	42 2f       	mov	r20, r18
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	89 b3       	in	r24, 0x19	; 25
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	48 17       	cp	r20, r24
  b8:	59 07       	cpc	r21, r25
  ba:	41 f5       	brne	.+80     	; 0x10c <getkey+0xa0>
		{
			switch(x)	//petla switch zalezna od zmiennej x, w ktorej znajduje sie odczytany stan klawiatury
  bc:	2d 30       	cpi	r18, 0x0D	; 13
  be:	89 f0       	breq	.+34     	; 0xe2 <getkey+0x76>
  c0:	28 f4       	brcc	.+10     	; 0xcc <getkey+0x60>
  c2:	27 30       	cpi	r18, 0x07	; 7
  c4:	c1 f0       	breq	.+48     	; 0xf6 <getkey+0x8a>
  c6:	2b 30       	cpi	r18, 0x0B	; 11
  c8:	89 f0       	breq	.+34     	; 0xec <getkey+0x80>
  ca:	1a c0       	rjmp	.+52     	; 0x100 <getkey+0x94>
  cc:	2e 30       	cpi	r18, 0x0E	; 14
  ce:	21 f0       	breq	.+8      	; 0xd8 <getkey+0x6c>
  d0:	2f 30       	cpi	r18, 0x0F	; 15
  d2:	b1 f4       	brne	.+44     	; 0x100 <getkey+0x94>
			{
				case 0b00001111:	//jesli zaden przycisk nie jest wcisniety
				{
					PORTB=0;		//zaden diod nie swieci
  d4:	18 ba       	out	0x18, r1	; 24
					break;
  d6:	16 c0       	rjmp	.+44     	; 0x104 <getkey+0x98>
				}
		
				case 0b00001110:	//jesli wcisnieto przycisk z wiersza 1
				{
					dt++;			//inkrementacja zmiennej dt
  d8:	6f 5f       	subi	r22, 0xFF	; 255
					PORTB = i-3;	//zaswiecenie numeru przyciska w postaci binarnej (od 1 do 4)
  da:	8d ef       	ldi	r24, 0xFD	; 253
  dc:	83 0f       	add	r24, r19
  de:	88 bb       	out	0x18, r24	; 24
					break;
  e0:	11 c0       	rjmp	.+34     	; 0x104 <getkey+0x98>
				}
			
				case 0b00001101:	//jesli wcisnieto przycisk z wiersza 2
				{
					dt++;			//inkrementacja zmiennej dt
  e2:	6f 5f       	subi	r22, 0xFF	; 255
					PORTB = i+1;	//zaswiecenie numeru przyciska w postaci binarnej (od 5 do 8)
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	83 0f       	add	r24, r19
  e8:	88 bb       	out	0x18, r24	; 24
					break;
  ea:	0c c0       	rjmp	.+24     	; 0x104 <getkey+0x98>
				}
			
				case 0b00001011:	//jesli wcisnieto przycisk z wiersza 3
				{
					dt++;			//inkrementacja zmiennej dt
  ec:	6f 5f       	subi	r22, 0xFF	; 255
					PORTB = i+5;	//zaswiecenie numeru przyciska w postaci binarnej (od 9 do 12)
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	83 0f       	add	r24, r19
  f2:	88 bb       	out	0x18, r24	; 24
					break;
  f4:	07 c0       	rjmp	.+14     	; 0x104 <getkey+0x98>
				}
				
				case 0b00000111:	//jesli wcisnieto przycisk z wiersza 4
				{
					dt++;			//inkrementacja zmiennej dt
  f6:	6f 5f       	subi	r22, 0xFF	; 255
					PORTB = i+9;	//zaswiecenie numeru przyciska w postaci binarnej (od 13 do 16)
  f8:	89 e0       	ldi	r24, 0x09	; 9
  fa:	83 0f       	add	r24, r19
  fc:	88 bb       	out	0x18, r24	; 24
					break;
  fe:	02 c0       	rjmp	.+4      	; 0x104 <getkey+0x98>
				}
				
				default:			//jesli zadna instrukcja nie byla wykonana, znaczy to, ze wcisnieto dwa i wiecej przyciski
				{
					PORTB = 0xFF;	//zaswiecenie wszystkich diod
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	88 bb       	out	0x18, r24	; 24
					break;
				}
			}
			if (dt > 1)				// jesli podczas wykonania instrukcji case wartosc dt jest wiecej niz 1, znaczy to, ze wcisnieto dwa i wiecej przyciski 
 104:	62 30       	cpi	r22, 0x02	; 2
 106:	10 f0       	brcs	.+4      	; 0x10c <getkey+0xa0>
			{
				PORTB = 0xFF;		//zaswiecenie wszystkich diod
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	88 bb       	out	0x18, r24	; 24

void getkey()
{
	uint8_t x, sk;		//inicjalizacja zmiennych x i sk
	uint8_t dt = 0;		//zmienna sluzy do obslugi nacisniec wiecej niz jeden przycisk
	for (uint8_t i = 4; i < 8; i++)
 10c:	3f 5f       	subi	r19, 0xFF	; 255
 10e:	38 30       	cpi	r19, 0x08	; 8
 110:	08 f4       	brcc	.+2      	; 0x114 <getkey+0xa8>
 112:	af cf       	rjmp	.-162    	; 0x72 <getkey+0x6>
 114:	08 95       	ret

00000116 <main>:
	}
}

int main(void)
{
	DDRA = 0xF0;	//ustawienie 4 najmlodszych bitow na wejscia i 4 najstarszych na wyjscia
 116:	80 ef       	ldi	r24, 0xF0	; 240
 118:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;	//ustawienie 4 najmlodszych bitow na wejscia podciagniete i 4 najstarszych na 0
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	8b bb       	out	0x1b, r24	; 27
	
	DDRB = 0xFF;	//ustawianie kierunku danych dla diod na wyjscie
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;	//ustawianie wszystkich diod na 0
 122:	18 ba       	out	0x18, r1	; 24
	
    while (1) 
    {
		getkey();	// wywolanie funkcji getkey()
 124:	0e 94 36 00 	call	0x6c	; 0x6c <getkey>
 128:	fd cf       	rjmp	.-6      	; 0x124 <main+0xe>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
