
Lab4_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000643  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059e  00000000  00000000  000007df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027f  00000000  00000000  00000d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f6  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000065  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000138b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <getkey>:
#include <avr/io.h>
#include <util/delay.h>

void getkey()
{
	for(uint8_t i=4;i<8;i++)
  6c:	24 e0       	ldi	r18, 0x04	; 4
  6e:	12 c0       	rjmp	.+36     	; 0x94 <getkey+0x28>
	{
		PORTB = ~_BV(i); // wprowadŸ 0 na i-tej pozycji i 1 na innych pozycjach
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	02 2e       	mov	r0, r18
  76:	02 c0       	rjmp	.+4      	; 0x7c <getkey+0x10>
  78:	88 0f       	add	r24, r24
  7a:	99 1f       	adc	r25, r25
  7c:	0a 94       	dec	r0
  7e:	e2 f7       	brpl	.-8      	; 0x78 <getkey+0xc>
  80:	80 95       	com	r24
  82:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	89 ef       	ldi	r24, 0xF9	; 249
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <getkey+0x1c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <getkey+0x22>
  8e:	00 00       	nop
		_delay_ms(1);
		char x=PINB&0x0F; // odczytaj i zapamiêtaj stan klawiatury
  90:	86 b3       	in	r24, 0x16	; 22
#include <avr/io.h>
#include <util/delay.h>

void getkey()
{
	for(uint8_t i=4;i<8;i++)
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	28 30       	cpi	r18, 0x08	; 8
  96:	60 f3       	brcs	.-40     	; 0x70 <getkey+0x4>
			case 0x00000011: PORTA = 0xFF; break;
			
			default: break;
		}	
	}
}
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
	DDRA = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	8b bb       	out	0x1b, r24	; 27
	
	DDRB = 0xF0;
  a2:	90 ef       	ldi	r25, 0xF0	; 240
  a4:	97 bb       	out	0x17, r25	; 23
	PORTB = 0x0F;
  a6:	88 bb       	out	0x18, r24	; 24
	while (1)
	{
		getkey();
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <getkey>
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <main+0xe>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
