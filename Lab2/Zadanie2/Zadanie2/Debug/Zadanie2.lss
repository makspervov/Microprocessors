
Zadanie2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001e8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075f  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000228  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>
#include <stdlib.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    DDRA=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x0F;
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	87 bb       	out	0x17, r24	; 23
	
	unsigned char tab[10] = 
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	de 01       	movw	r26, r28
  a6:	11 96       	adiw	r26, 0x01	; 1
  a8:	01 90       	ld	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	8a 95       	dec	r24
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x26>
	
	//int czas;
	
    while (1) 
    {
		for (uint8_t i = 2; i<=142; i+=7)		//wyswietlanie znakow od 2 do 142
  b0:	22 e0       	ldi	r18, 0x02	; 2
  b2:	95 c0       	rjmp	.+298    	; 0x1de <main+0x15c>
		{
			for (uint8_t j = 0; j < 125; j++)	//petla stworzona dla poprawnego wyswietlania lizcb
			{
				if (i<10)						//liczby jednocyfrowe
  b4:	2a 30       	cpi	r18, 0x0A	; 10
  b6:	88 f4       	brcc	.+34     	; 0xda <main+0x58>
				{	
					PORTB = ~_BV(3);
  b8:	87 ef       	ldi	r24, 0xF7	; 247
  ba:	88 bb       	out	0x18, r24	; 24
					PORTA = tab[i];
  bc:	e1 e0       	ldi	r30, 0x01	; 1
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	ec 0f       	add	r30, r28
  c2:	fd 1f       	adc	r31, r29
  c4:	e2 0f       	add	r30, r18
  c6:	f1 1d       	adc	r31, r1
  c8:	80 81       	ld	r24, Z
  ca:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	87 ee       	ldi	r24, 0xE7	; 231
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x4e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x54>
  d6:	00 00       	nop
  d8:	7b c0       	rjmp	.+246    	; 0x1d0 <main+0x14e>
					_delay_ms(4);
				}
			
				else if (i >= 10 && i < 100)	//liczby dwocyfrowe
  da:	86 ef       	ldi	r24, 0xF6	; 246
  dc:	82 0f       	add	r24, r18
  de:	8a 35       	cpi	r24, 0x5A	; 90
  e0:	88 f5       	brcc	.+98     	; 0x144 <main+0xc2>
				{
					PORTB = ~_BV(3);
  e2:	87 ef       	ldi	r24, 0xF7	; 247
  e4:	88 bb       	out	0x18, r24	; 24
					PORTA = tab[i%10];
  e6:	8d ec       	ldi	r24, 0xCD	; 205
  e8:	28 9f       	mul	r18, r24
  ea:	81 2d       	mov	r24, r1
  ec:	11 24       	eor	r1, r1
  ee:	86 95       	lsr	r24
  f0:	86 95       	lsr	r24
  f2:	86 95       	lsr	r24
  f4:	38 2f       	mov	r19, r24
  f6:	33 0f       	add	r19, r19
  f8:	93 2f       	mov	r25, r19
  fa:	99 0f       	add	r25, r25
  fc:	99 0f       	add	r25, r25
  fe:	93 0f       	add	r25, r19
 100:	e2 2f       	mov	r30, r18
 102:	e9 1b       	sub	r30, r25
 104:	9e 2f       	mov	r25, r30
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	e9 0f       	add	r30, r25
 110:	f1 1d       	adc	r31, r1
 112:	90 81       	ld	r25, Z
 114:	9b bb       	out	0x1b, r25	; 27
 116:	e3 ef       	ldi	r30, 0xF3	; 243
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x98>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x9e>
 120:	00 00       	nop
					_delay_ms(2);
					
					PORTB = ~_BV(2);
 122:	9b ef       	ldi	r25, 0xFB	; 251
 124:	98 bb       	out	0x18, r25	; 24
					PORTA = tab[i/10];
 126:	e1 e0       	ldi	r30, 0x01	; 1
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	e8 0f       	add	r30, r24
 130:	f1 1d       	adc	r31, r1
 132:	80 81       	ld	r24, Z
 134:	8b bb       	out	0x1b, r24	; 27
 136:	83 ef       	ldi	r24, 0xF3	; 243
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0xb8>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0xbe>
 140:	00 00       	nop
 142:	46 c0       	rjmp	.+140    	; 0x1d0 <main+0x14e>
					_delay_ms(2);
				}
			
				else							//liczby trzycyfrowe
				{
					PORTB = ~_BV(3);
 144:	87 ef       	ldi	r24, 0xF7	; 247
 146:	88 bb       	out	0x18, r24	; 24
					PORTA = tab[i%10];
 148:	8d ec       	ldi	r24, 0xCD	; 205
 14a:	28 9f       	mul	r18, r24
 14c:	91 2d       	mov	r25, r1
 14e:	11 24       	eor	r1, r1
 150:	96 95       	lsr	r25
 152:	96 95       	lsr	r25
 154:	96 95       	lsr	r25
 156:	59 2f       	mov	r21, r25
 158:	55 0f       	add	r21, r21
 15a:	35 2f       	mov	r19, r21
 15c:	33 0f       	add	r19, r19
 15e:	33 0f       	add	r19, r19
 160:	35 0f       	add	r19, r21
 162:	e2 2f       	mov	r30, r18
 164:	e3 1b       	sub	r30, r19
 166:	3e 2f       	mov	r19, r30
 168:	e1 e0       	ldi	r30, 0x01	; 1
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	e3 0f       	add	r30, r19
 172:	f1 1d       	adc	r31, r1
 174:	30 81       	ld	r19, Z
 176:	3b bb       	out	0x1b, r19	; 27
 178:	e9 ef       	ldi	r30, 0xF9	; 249
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xfa>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x100>
 182:	00 00       	nop
					_delay_ms(1);
				
					PORTB = ~_BV(2);
 184:	3b ef       	ldi	r19, 0xFB	; 251
 186:	38 bb       	out	0x18, r19	; 24
					PORTA = tab[(i / 10) % 10];
 188:	98 9f       	mul	r25, r24
 18a:	81 2d       	mov	r24, r1
 18c:	11 24       	eor	r1, r1
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	86 95       	lsr	r24
 194:	88 0f       	add	r24, r24
 196:	38 2f       	mov	r19, r24
 198:	33 0f       	add	r19, r19
 19a:	33 0f       	add	r19, r19
 19c:	83 0f       	add	r24, r19
 19e:	98 1b       	sub	r25, r24
 1a0:	e1 e0       	ldi	r30, 0x01	; 1
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ec 0f       	add	r30, r28
 1a6:	fd 1f       	adc	r31, r29
 1a8:	e9 0f       	add	r30, r25
 1aa:	f1 1d       	adc	r31, r1
 1ac:	80 81       	ld	r24, Z
 1ae:	8b bb       	out	0x1b, r24	; 27
 1b0:	89 ef       	ldi	r24, 0xF9	; 249
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x132>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x138>
 1ba:	00 00       	nop
					_delay_ms(1);
				
					PORTB = ~_BV(1);
 1bc:	8d ef       	ldi	r24, 0xFD	; 253
 1be:	88 bb       	out	0x18, r24	; 24
					PORTA = tab[1];				//lub PORTA = tab[i/100];
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	8b bb       	out	0x1b, r24	; 27
 1c4:	e3 ef       	ldi	r30, 0xF3	; 243
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x146>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x14c>
 1ce:	00 00       	nop
	
    while (1) 
    {
		for (uint8_t i = 2; i<=142; i+=7)		//wyswietlanie znakow od 2 do 142
		{
			for (uint8_t j = 0; j < 125; j++)	//petla stworzona dla poprawnego wyswietlania lizcb
 1d0:	4f 5f       	subi	r20, 0xFF	; 255
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <main+0x154>
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	4d 37       	cpi	r20, 0x7D	; 125
 1d8:	08 f4       	brcc	.+2      	; 0x1dc <main+0x15a>
 1da:	6c cf       	rjmp	.-296    	; 0xb4 <main+0x32>
	
	//int czas;
	
    while (1) 
    {
		for (uint8_t i = 2; i<=142; i+=7)		//wyswietlanie znakow od 2 do 142
 1dc:	29 5f       	subi	r18, 0xF9	; 249
 1de:	2f 38       	cpi	r18, 0x8F	; 143
 1e0:	c8 f3       	brcs	.-14     	; 0x1d4 <main+0x152>
 1e2:	66 cf       	rjmp	.-308    	; 0xb0 <main+0x2e>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
